[gd_scene load_steps=20 format=3 uid="uid://y0bfsrpe1yf"]

[ext_resource type="Texture2D" uid="uid://bwh3pnp6rcycn" path="res://Assets/Ghost/Ghost_Body_01.png" id="1_u08qc"]
[ext_resource type="Texture2D" uid="uid://gcljnvys5tll" path="res://Assets/Ghost/Ghost_Eyes_Down.png" id="2_2wyse"]
[ext_resource type="Script" path="res://body_sprite.gd" id="2_n5vur"]
[ext_resource type="Texture2D" uid="uid://k486j4lctjb7" path="res://Assets/Ghost/Ghost_Body_02.png" id="4_btsxe"]
[ext_resource type="Script" path="res://eyes.gd" id="4_diumu"]
[ext_resource type="Texture2D" uid="uid://dcgg14tac7mou" path="res://Assets/Ghost/Ghost_Eyes_Up.png" id="5_axt3f"]
[ext_resource type="Texture2D" uid="uid://cvgpjfpg6poi1" path="res://Assets/Ghost/Ghost_Eyes_Left.png" id="6_53ccm"]
[ext_resource type="Texture2D" uid="uid://dw3xx2kpcbjrs" path="res://Assets/Ghost/Ghost_Eyes_Right.png" id="7_3hq1r"]
[ext_resource type="Texture2D" uid="uid://bd4p43ndtu2v8" path="res://Assets/Ghost/Ghost_Vulnerable_Blue_01.png" id="9_elu5b"]
[ext_resource type="Texture2D" uid="uid://blq70pt5we2b8" path="res://Assets/Ghost/Ghost_Vulnerable_Blue_02.png" id="10_imni4"]
[ext_resource type="Texture2D" uid="uid://d0uu218xbjg0r" path="res://Assets/Ghost/Ghost_Vulnerable_White_02.png" id="11_2p4am"]
[ext_resource type="Texture2D" uid="uid://cvto5sswde2ik" path="res://Assets/Ghost/Ghost_Vulnerable_White_01.png" id="12_3st6u"]
[ext_resource type="Theme" uid="uid://be45544wwm4lc" path="res://Scenes/label_theme.tres" id="13_ylham"]

[sub_resource type="GDScript" id="GDScript_k481j"]
script/source = "extends CharacterBody2D

enum GhostState{SCATTER, CHASE, RUN_AWAY, EATEN, START_HOME, BIT_SCARED, BEATEN}

signal direction_change(current_direction: String)

var direction = null
var current_state: GhostState
var scatter_index: int = 0
var home_index: int = 0

@export var difficulty: int = 1
@export var eaten_speed = 300
@export var speed = 150
@export var target_array: Array[Marker2D]
@export var at_home_targets: Array[Marker2D]
@export var tile_map: MazeTileMap
@export var agent: NavigationAgent2D
@export var color: Color
@export var points_manager: PointsManager
@export var is_starting_at_home: bool
@export var start: Marker2D

@onready var pacman = $\"../../../pacman\"
@onready var scatter_timer = $ScatterTime
@onready var update_chasing_target_position_timer = $UpdateChasingTargetPositionTimer
@onready var run_away_timer = $RunAwayTimer
@onready var recover_from_run_away = $RecoverFromRunAway
@onready var body = $body
@onready var eyes = $eyes
@onready var points_label = $PointsLabel
@onready var at_home_timer = $AtHomeTimer
@onready var eat_ghost_sp = $\"../../../SoundPlayers/EatGhostSP\"

func IS_SCARED(): return true if (current_state == GhostState.RUN_AWAY or current_state == GhostState.BIT_SCARED) else false

func _ready():
	current_state = GhostState.RUN_AWAY
	position = start.position
	scatter_timer.stop()
	update_chasing_target_position_timer.stop()
	run_away_timer.stop()
	recover_from_run_away.stop()
	at_home_timer.stop()
	scatter_index = 0
	home_index = 0
	body.move()
	body.show()
	eyes.show()
	agent.path_desired_distance = 4.0
	agent.target_desired_distance = 4.0
	#agent.target_reached.connect(on_position_reached)
	
	if is_starting_at_home: start_at_home()
	else:
		scatter_index -= 1
		scatter_timer.start()
		current_state = GhostState.SCATTER
		call_deferred(\"actor_setup\")

func hide_from_UI():
	body.hide()
	eyes.hide()
	current_state = GhostState.BEATEN
	scatter_timer.stop()
	update_chasing_target_position_timer.stop()
	run_away_timer.stop()
	recover_from_run_away.stop()
	at_home_timer.stop()

func scatter():
	scatter_timer.start()
	current_state = GhostState.SCATTER
	call_deferred(\"actor_setup\")

func actor_setup():
	await get_tree().physics_frame
	agent.target_position = target_array[scatter_index].position
	
func set_movement_target(target: Vector2):
	agent.target_position = target

func start_at_home():
	current_state = GhostState.START_HOME
	at_home_timer.start()
	agent.target_position = at_home_targets[home_index].position

func _on_at_home_timer_timeout():
	if current_state == GhostState.BIT_SCARED: current_state = GhostState.RUN_AWAY
	else: scatter()

func move_to_next_home_pos():
	home_index = 1 if home_index == 0 else 0
	agent.target_position = at_home_targets[home_index].position

func _physics_process(delta):
	if agent.is_navigation_finished() and current_state == GhostState.SCATTER:
		agent.target_position = target_array[scatter_index].position
		if scatter_index >= (target_array.size()-1): scatter_index = 0
		else: scatter_index += 1
	elif agent.is_navigation_finished() and current_state == GhostState.RUN_AWAY: run_away_path()
	elif agent.is_navigation_finished() and current_state == GhostState.CHASE: return
	elif agent.is_navigation_finished() and current_state == GhostState.EATEN: start_chasing_pacman()
	elif agent.is_navigation_finished() and current_state == GhostState.START_HOME: move_to_next_home_pos()
	elif agent.is_navigation_finished() and current_state == GhostState.BIT_SCARED: move_to_next_home_pos()
	elif current_state == GhostState.BEATEN: return
	var current_agent_position: Vector2 = global_position
	var next_path_position: Vector2 = agent.get_next_path_position()
	
	var current_speed = (eaten_speed if current_state == GhostState.EATEN else speed)*difficulty
	if (current_state == GhostState.RUN_AWAY or current_state == GhostState.BIT_SCARED): current_speed *= 0.75
	var new_velocity: Vector2 = next_path_position - current_agent_position
	new_velocity = new_velocity.normalized()
	new_velocity = new_velocity * current_speed
	
	calculate_direction(new_velocity)
	velocity = new_velocity
	move_and_slide()

func calculate_direction(velocity: Vector2):
	var current_direction
	if velocity.y < (-speed+10): current_direction = \"up\"
	elif velocity.y > (speed-10): current_direction = \"down\"
	elif velocity.x < (-speed+10): current_direction = \"left\"
	elif velocity.x > (speed-10): current_direction = \"right\"
	
	if current_direction != direction:
		direction = current_direction
		direction_change.emit(direction)


func _on_scatter_time_timeout():
	update_chasing_target_position_timer.start()
	current_state = GhostState.CHASE

func start_chasing_pacman():
	update_chasing_target_position_timer.start()
	current_state = GhostState.CHASE
	eyes.show()
	body.show()
	body.move()

func _on_update_chasing_target_position_timer_timeout():
	agent.target_position = pacman.position

func run_away():
	if current_state == GhostState.EATEN:
		pass
	elif current_state == GhostState.START_HOME:
		current_state = GhostState.BIT_SCARED
		body.run_away()
		eyes.hide()
		run_away_timer.start()
		recover_from_run_away.stop()
		scatter_timer.stop()
		update_chasing_target_position_timer.stop()
	else:
		current_state = GhostState.RUN_AWAY
		
		body.run_away()
		eyes.hide()
		
		run_away_timer.start()
		recover_from_run_away.stop()
		scatter_timer.stop()
		update_chasing_target_position_timer.stop()
		
		run_away_path()

func run_away_path():
	var empty_cell_position = tile_map.get_random_empry_cell_position()
	agent.target_position = empty_cell_position

func _on_run_away_timer_timeout():
	body.recover_from_run_away()
	recover_from_run_away.start()

func _on_recover_from_run_away_timeout():
	if current_state == GhostState.EATEN: pass
	else:
		current_state = GhostState.CHASE
		update_chasing_target_position_timer.start()
		eyes.show()
		body.move()

func get_eaten():
	eat_ghost_sp.play()
	current_state = GhostState.EATEN
	body.hide()
	eyes.show()
	points_label.show()
	points_label.text = str(points_manager.points_for_ghost_eaten)
	await points_manager.pause_on_ghost_eaten()
	points_label.hide()
	run_away_timer.stop()
	agent.target_position = at_home_targets[2].position

func _on_area_2d_body_entered(body):
	var player = body as Player
	if current_state == GhostState.RUN_AWAY or current_state == GhostState.BIT_SCARED:
		get_eaten()
	elif current_state == GhostState.EATEN: pass
	elif current_state == GhostState.SCATTER or current_state == GhostState.CHASE or current_state == GhostState.START_HOME:
		update_chasing_target_position_timer.stop()
		player.die()
	else: pass
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_q1oys"]
size = Vector2(14, 14)

[sub_resource type="Animation" id="Animation_yhia2"]
resource_name = "moving"
length = 0.5
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("body:texture")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.25),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [ExtResource("1_u08qc"), ExtResource("4_btsxe")]
}

[sub_resource type="Animation" id="Animation_pau6j"]
resource_name = "recover_from_run_away"
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("body:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.25, 0.5, 0.75),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 1,
"values": [ExtResource("9_elu5b"), ExtResource("11_2p4am"), ExtResource("10_imni4"), ExtResource("12_3st6u")]
}

[sub_resource type="Animation" id="Animation_e78kq"]
resource_name = "running_away"
length = 0.5
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("body:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.25),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [ExtResource("9_elu5b"), ExtResource("10_imni4")]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_d53b8"]
_data = {
"moving": SubResource("Animation_yhia2"),
"recover_from_run_away": SubResource("Animation_pau6j"),
"running_away": SubResource("Animation_e78kq")
}

[node name="Blinky" type="CharacterBody2D" node_paths=PackedStringArray("agent")]
collision_layer = 2
collision_mask = 0
script = SubResource("GDScript_k481j")
agent = NodePath("NavigationAgent2D")
color = Color(1, 0, 0, 1)

[node name="CollosionArea" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="CollosionArea"]
shape = SubResource("RectangleShape2D_q1oys")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
shape = SubResource("RectangleShape2D_q1oys")

[node name="body" type="Sprite2D" parent="."]
texture_filter = 1
texture = ExtResource("1_u08qc")
script = ExtResource("2_n5vur")

[node name="eyes" type="Sprite2D" parent="."]
texture_filter = 1
texture = ExtResource("2_2wyse")
script = ExtResource("4_diumu")
up = ExtResource("5_axt3f")
down = ExtResource("2_2wyse")
left = ExtResource("6_53ccm")
right = ExtResource("7_3hq1r")

[node name="NavigationAgent2D" type="NavigationAgent2D" parent="."]

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_d53b8")
}

[node name="ScatterTime" type="Timer" parent="."]
wait_time = 8.0
one_shot = true

[node name="UpdateChasingTargetPositionTimer" type="Timer" parent="."]
wait_time = 0.2

[node name="RunAwayTimer" type="Timer" parent="."]
wait_time = 8.0
one_shot = true

[node name="RecoverFromRunAway" type="Timer" parent="."]
wait_time = 2.0
one_shot = true

[node name="AtHomeTimer" type="Timer" parent="."]
wait_time = 8.0
one_shot = true

[node name="PointsLabel" type="Label" parent="."]
visible = false
texture_filter = 1
offset_left = -16.0
offset_top = -20.0
offset_right = 18.0
offset_bottom = -4.0
theme = ExtResource("13_ylham")
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/outline_size = 5
theme_override_font_sizes/font_size = 12
text = "200"
horizontal_alignment = 1
vertical_alignment = 1

[connection signal="body_entered" from="CollosionArea" to="." method="_on_area_2d_body_entered"]
[connection signal="timeout" from="ScatterTime" to="." method="_on_scatter_time_timeout"]
[connection signal="timeout" from="UpdateChasingTargetPositionTimer" to="." method="_on_update_chasing_target_position_timer_timeout"]
[connection signal="timeout" from="RunAwayTimer" to="." method="_on_run_away_timer_timeout"]
[connection signal="timeout" from="RecoverFromRunAway" to="." method="_on_recover_from_run_away_timeout"]
[connection signal="timeout" from="AtHomeTimer" to="." method="_on_at_home_timer_timeout"]
